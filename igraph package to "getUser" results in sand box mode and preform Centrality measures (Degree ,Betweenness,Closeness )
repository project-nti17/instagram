install.packages('instaR')
library(instaR)
require(httr)
require(rjson)
require(RCurl)
install.packages("igraph" , repos="https://cran.rstudio.com/" )
library(igraph)
library(ggplot2)


#Authentication

options(RCurlOptions = list(verbose = FALSE, capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"), ssl.verifypeer = FALSE))

## getting callback URL
full_url <- oauth_callback()
full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
message <- paste("Copy and paste into Site URL on Instagram App Settings:", 
                 full_url, "\nWhen done, press any key to continue...")

invisible(readline(message))


app_name <- "XXXXXXX"
client_id <- "XXXXXXX"
client_secret <- "XXXXXXX"
scope = "public_content"

instagram <- oauth_endpoint(
  authorize = "https://api.instagram.com/oauth/authorize",
  access = "https://api.instagram.com/oauth/access_token")  
myapp <- oauth_app(app_name, client_id, client_secret)


instaOAuth(client_id, client_secret, scope = c("public_content"))


Hisham_info <- getUser("hishamelwakeil", token = ig_oauth)
Eian_info <- getUser(username = "eian_foad",token = ig_oauth)
mohammed_info <- getUser(username = "moh_bn_7sn",token = ig_oauth)
abdallah_info <- getUser(username = "abdallah.elsayd",token = ig_oauth)
Rehab_info <- getUser(username = "ruby_amer88",token = ig_oauth)

users_information <- c(Hisham_info,Eian_info,mohammed_info,abdallah_info,Rehab_info)
user_name <- c("hishamelwakeil","eian_foad","moh_bn_7sn","abdallah.elsayd","ruby_amer88")
users.data <- data.frame(user_name=user_name,users_information=users_information)


 # Create graph from user information
                       
 info_graph <- graph.data.frame(users.data, directed = n)
                       
 #----------label-----------------
                       
  # Assign labels to the graph (=people's names)
                       
V(info_graph)$label <- V(info_graph)$name
                       
  #---------- Plot the graph------
                       
plot.igraph(info_graph) 

 
 betweenness(info_graph,directed = FALSE)
 degree(info_graph,mode="all")
 plot(info_graph,vertex.size=degree(info_graph)*10)
 
 
 #betweennes: number of shortest paths an actor is on
 
 betweenness(info_graph,directed = FALSE)
 degree(info_graph,mode="all")
 plot(info_graph,vertex.size=betweenness(info_graph)*10)
 
